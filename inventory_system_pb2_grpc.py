# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import inventory_system_pb2 as inventory__system__pb2


class InventorySystemStub(object):
  """A service that allows you to keep track of an inventory of products and the orders for those products 

  Note: Future TODOs are the planned updates for the inventory system to make it more general and more feature-rich
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetProductByID = channel.unary_unary(
        '/InventorySystem/GetProductByID',
        request_serializer=inventory__system__pb2.ID.SerializeToString,
        response_deserializer=inventory__system__pb2.Product.FromString,
        )
    self.GetProductByName = channel.unary_unary(
        '/InventorySystem/GetProductByName',
        request_serializer=inventory__system__pb2.Name.SerializeToString,
        response_deserializer=inventory__system__pb2.Product.FromString,
        )
    self.GetProductsByManufacturer = channel.unary_unary(
        '/InventorySystem/GetProductsByManufacturer',
        request_serializer=inventory__system__pb2.Manufacturer.SerializeToString,
        response_deserializer=inventory__system__pb2.Products.FromString,
        )
    self.AddProduct = channel.unary_unary(
        '/InventorySystem/AddProduct',
        request_serializer=inventory__system__pb2.Product.SerializeToString,
        response_deserializer=inventory__system__pb2.ID.FromString,
        )
    self.UpdateProduct = channel.unary_unary(
        '/InventorySystem/UpdateProduct',
        request_serializer=inventory__system__pb2.Product.SerializeToString,
        response_deserializer=inventory__system__pb2.Empty.FromString,
        )
    self.GetProductsInStock = channel.unary_unary(
        '/InventorySystem/GetProductsInStock',
        request_serializer=inventory__system__pb2.Empty.SerializeToString,
        response_deserializer=inventory__system__pb2.Products.FromString,
        )
    self.GetOrder = channel.unary_unary(
        '/InventorySystem/GetOrder',
        request_serializer=inventory__system__pb2.ID.SerializeToString,
        response_deserializer=inventory__system__pb2.Order.FromString,
        )
    self.CreateOrder = channel.unary_unary(
        '/InventorySystem/CreateOrder',
        request_serializer=inventory__system__pb2.Order.SerializeToString,
        response_deserializer=inventory__system__pb2.ID.FromString,
        )
    self.UpdateOrder = channel.unary_unary(
        '/InventorySystem/UpdateOrder',
        request_serializer=inventory__system__pb2.Order.SerializeToString,
        response_deserializer=inventory__system__pb2.Empty.FromString,
        )
    self.GetOrders = channel.unary_unary(
        '/InventorySystem/GetOrders',
        request_serializer=inventory__system__pb2.OrderStatus.SerializeToString,
        response_deserializer=inventory__system__pb2.Orders.FromString,
        )
    self.ClearDatabase = channel.unary_unary(
        '/InventorySystem/ClearDatabase',
        request_serializer=inventory__system__pb2.Empty.SerializeToString,
        response_deserializer=inventory__system__pb2.Empty.FromString,
        )


class InventorySystemServicer(object):
  """A service that allows you to keep track of an inventory of products and the orders for those products 

  Note: Future TODOs are the planned updates for the inventory system to make it more general and more feature-rich
  """

  def GetProductByID(self, request, context):
    """Gets a product by its ID 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetProductByName(self, request, context):
    """Gets a product by its name 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetProductsByManufacturer(self, request, context):
    """Retrieves all products from a given manufacturer 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddProduct(self, request, context):
    """Adds a new product that does not have the same name as previous products and the ID is
    assigned by the server; returns the ID of the product if it was added successfully
    otherwise empty string 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateProduct(self, request, context):
    """Update products (name and ID cannot be updated) 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetProductsInStock(self, request, context):
    """Retrieves all products that are in stock  
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetOrder(self, request, context):
    """Future TODO: Create function to get all products no matter the stock
    rpc GetProducts (Empty) returns (Products) {}

    Gets an order by its ID 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateOrder(self, request, context):
    """Creates an order if there is enough product in stock with an ID assigned by the server;
    returns a string if there is an exception otherwise empty string 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateOrder(self, request, context):
    """Update orders (ID cannot be updated) and if there is not enough product the order is not updated 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetOrders(self, request, context):
    """Retrieves all orders that are unshipped, unpaid, or both  
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ClearDatabase(self, request, context):
    """Future TODO: create new GetOrders that returns all orders
    rpc GetOrders (Empty) returns (Orders) {}

    Clears inventory system database 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InventorySystemServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetProductByID': grpc.unary_unary_rpc_method_handler(
          servicer.GetProductByID,
          request_deserializer=inventory__system__pb2.ID.FromString,
          response_serializer=inventory__system__pb2.Product.SerializeToString,
      ),
      'GetProductByName': grpc.unary_unary_rpc_method_handler(
          servicer.GetProductByName,
          request_deserializer=inventory__system__pb2.Name.FromString,
          response_serializer=inventory__system__pb2.Product.SerializeToString,
      ),
      'GetProductsByManufacturer': grpc.unary_unary_rpc_method_handler(
          servicer.GetProductsByManufacturer,
          request_deserializer=inventory__system__pb2.Manufacturer.FromString,
          response_serializer=inventory__system__pb2.Products.SerializeToString,
      ),
      'AddProduct': grpc.unary_unary_rpc_method_handler(
          servicer.AddProduct,
          request_deserializer=inventory__system__pb2.Product.FromString,
          response_serializer=inventory__system__pb2.ID.SerializeToString,
      ),
      'UpdateProduct': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateProduct,
          request_deserializer=inventory__system__pb2.Product.FromString,
          response_serializer=inventory__system__pb2.Empty.SerializeToString,
      ),
      'GetProductsInStock': grpc.unary_unary_rpc_method_handler(
          servicer.GetProductsInStock,
          request_deserializer=inventory__system__pb2.Empty.FromString,
          response_serializer=inventory__system__pb2.Products.SerializeToString,
      ),
      'GetOrder': grpc.unary_unary_rpc_method_handler(
          servicer.GetOrder,
          request_deserializer=inventory__system__pb2.ID.FromString,
          response_serializer=inventory__system__pb2.Order.SerializeToString,
      ),
      'CreateOrder': grpc.unary_unary_rpc_method_handler(
          servicer.CreateOrder,
          request_deserializer=inventory__system__pb2.Order.FromString,
          response_serializer=inventory__system__pb2.ID.SerializeToString,
      ),
      'UpdateOrder': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateOrder,
          request_deserializer=inventory__system__pb2.Order.FromString,
          response_serializer=inventory__system__pb2.Empty.SerializeToString,
      ),
      'GetOrders': grpc.unary_unary_rpc_method_handler(
          servicer.GetOrders,
          request_deserializer=inventory__system__pb2.OrderStatus.FromString,
          response_serializer=inventory__system__pb2.Orders.SerializeToString,
      ),
      'ClearDatabase': grpc.unary_unary_rpc_method_handler(
          servicer.ClearDatabase,
          request_deserializer=inventory__system__pb2.Empty.FromString,
          response_serializer=inventory__system__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'InventorySystem', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
