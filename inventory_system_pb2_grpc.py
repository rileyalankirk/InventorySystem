# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import inventory_system_pb2 as inventory__system__pb2


class InventorySystemStub(object):
  """A service that allows you to keep track of an inventory of products and the orders for those products 

  Note: Future TODOs are the planned updates for the inventory system to make it more general and more feature-rich
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetProductsByID = channel.unary_unary(
        '/InventorySystem/GetProductsByID',
        request_serializer=inventory__system__pb2.IDs.SerializeToString,
        response_deserializer=inventory__system__pb2.Products.FromString,
        )
    self.GetProductsByName = channel.unary_unary(
        '/InventorySystem/GetProductsByName',
        request_serializer=inventory__system__pb2.Names.SerializeToString,
        response_deserializer=inventory__system__pb2.Products.FromString,
        )
    self.GetProductsByManufacturer = channel.unary_unary(
        '/InventorySystem/GetProductsByManufacturer',
        request_serializer=inventory__system__pb2.Manufacturer.SerializeToString,
        response_deserializer=inventory__system__pb2.Products.FromString,
        )
    self.AddProducts = channel.unary_unary(
        '/InventorySystem/AddProducts',
        request_serializer=inventory__system__pb2.Products.SerializeToString,
        response_deserializer=inventory__system__pb2.IDs.FromString,
        )
    self.UpdateProducts = channel.unary_unary(
        '/InventorySystem/UpdateProducts',
        request_serializer=inventory__system__pb2.Products.SerializeToString,
        response_deserializer=inventory__system__pb2.Empty.FromString,
        )
    self.GetProductsInStock = channel.unary_unary(
        '/InventorySystem/GetProductsInStock',
        request_serializer=inventory__system__pb2.Empty.SerializeToString,
        response_deserializer=inventory__system__pb2.Products.FromString,
        )
    self.GetOrdersByID = channel.unary_unary(
        '/InventorySystem/GetOrdersByID',
        request_serializer=inventory__system__pb2.IDs.SerializeToString,
        response_deserializer=inventory__system__pb2.Orders.FromString,
        )
    self.CreateOrder = channel.unary_unary(
        '/InventorySystem/CreateOrder',
        request_serializer=inventory__system__pb2.Order.SerializeToString,
        response_deserializer=inventory__system__pb2.ID.FromString,
        )
    self.UpdateOrders = channel.unary_unary(
        '/InventorySystem/UpdateOrders',
        request_serializer=inventory__system__pb2.Orders.SerializeToString,
        response_deserializer=inventory__system__pb2.Empty.FromString,
        )
    self.GetOrdersByStatus = channel.unary_unary(
        '/InventorySystem/GetOrdersByStatus',
        request_serializer=inventory__system__pb2.OrderStatus.SerializeToString,
        response_deserializer=inventory__system__pb2.Orders.FromString,
        )
    self.ClearDatabase = channel.unary_unary(
        '/InventorySystem/ClearDatabase',
        request_serializer=inventory__system__pb2.Empty.SerializeToString,
        response_deserializer=inventory__system__pb2.Empty.FromString,
        )


class InventorySystemServicer(object):
  """A service that allows you to keep track of an inventory of products and the orders for those products 

  Note: Future TODOs are the planned updates for the inventory system to make it more general and more feature-rich
  """

  def GetProductsByID(self, request, context):
    """Gets products by their IDs 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetProductsByName(self, request, context):
    """Gets products by their names 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetProductsByManufacturer(self, request, context):
    """Retrieves all products from a given manufacturer 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddProducts(self, request, context):
    """Adds new products that do not have the same names as previous products and the IDs are
    assigned by the server; returns the IDs of the products if they were added successfully
    otherwise empty list of IDs 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateProducts(self, request, context):
    """Updates products (name and ID cannot be updated) 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetProductsInStock(self, request, context):
    """Retrieves all products that are in stock  
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetOrdersByID(self, request, context):
    """Future TODO: Create function to get all products no matter the stock
    rpc GetProducts (Empty) returns (Products) {}

    Gets orders by their ID 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateOrder(self, request, context):
    """Creates an order if there is enough product in stock with an ID assigned by the server;
    returns a string if there is an exception otherwise empty string 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateOrders(self, request, context):
    """Update orders (ID cannot be updated) and if there is not enough product the order is not updated 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetOrdersByStatus(self, request, context):
    """Retrieves all orders that are unshipped, unpaid, or both  
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ClearDatabase(self, request, context):
    """Future TODO: create new GetOrders that returns all orders
    rpc GetOrders (Empty) returns (Orders) {}

    Clears inventory system database 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InventorySystemServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetProductsByID': grpc.unary_unary_rpc_method_handler(
          servicer.GetProductsByID,
          request_deserializer=inventory__system__pb2.IDs.FromString,
          response_serializer=inventory__system__pb2.Products.SerializeToString,
      ),
      'GetProductsByName': grpc.unary_unary_rpc_method_handler(
          servicer.GetProductsByName,
          request_deserializer=inventory__system__pb2.Names.FromString,
          response_serializer=inventory__system__pb2.Products.SerializeToString,
      ),
      'GetProductsByManufacturer': grpc.unary_unary_rpc_method_handler(
          servicer.GetProductsByManufacturer,
          request_deserializer=inventory__system__pb2.Manufacturer.FromString,
          response_serializer=inventory__system__pb2.Products.SerializeToString,
      ),
      'AddProducts': grpc.unary_unary_rpc_method_handler(
          servicer.AddProducts,
          request_deserializer=inventory__system__pb2.Products.FromString,
          response_serializer=inventory__system__pb2.IDs.SerializeToString,
      ),
      'UpdateProducts': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateProducts,
          request_deserializer=inventory__system__pb2.Products.FromString,
          response_serializer=inventory__system__pb2.Empty.SerializeToString,
      ),
      'GetProductsInStock': grpc.unary_unary_rpc_method_handler(
          servicer.GetProductsInStock,
          request_deserializer=inventory__system__pb2.Empty.FromString,
          response_serializer=inventory__system__pb2.Products.SerializeToString,
      ),
      'GetOrdersByID': grpc.unary_unary_rpc_method_handler(
          servicer.GetOrdersByID,
          request_deserializer=inventory__system__pb2.IDs.FromString,
          response_serializer=inventory__system__pb2.Orders.SerializeToString,
      ),
      'CreateOrder': grpc.unary_unary_rpc_method_handler(
          servicer.CreateOrder,
          request_deserializer=inventory__system__pb2.Order.FromString,
          response_serializer=inventory__system__pb2.ID.SerializeToString,
      ),
      'UpdateOrders': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateOrders,
          request_deserializer=inventory__system__pb2.Orders.FromString,
          response_serializer=inventory__system__pb2.Empty.SerializeToString,
      ),
      'GetOrdersByStatus': grpc.unary_unary_rpc_method_handler(
          servicer.GetOrdersByStatus,
          request_deserializer=inventory__system__pb2.OrderStatus.FromString,
          response_serializer=inventory__system__pb2.Orders.SerializeToString,
      ),
      'ClearDatabase': grpc.unary_unary_rpc_method_handler(
          servicer.ClearDatabase,
          request_deserializer=inventory__system__pb2.Empty.FromString,
          response_serializer=inventory__system__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'InventorySystem', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
